---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by White.
--- DateTime: 2023/1/9 9:15
---

--    lua学习——第四章 元表与元方法
-- 一、元表与元方法的使用

--定义一个混合结构
emp = { "北京", name = "张三", age = 23, '上海', '广州', '深圳', 15 }
--在重写__index之前访问 emp[6]：nil
print(emp[6])
--声明一个元表
meta = {}

--将metatable指定为普通表table的元表
setmetatable(emp, meta)

-- 1.__index元方法 ---------------------------------
--  ① 如果访问的数组索引或key不存在，那么系统就会自动调用元表的 __index 元方法。该重写的方法可以是一个函数，也可以是另一个表。
print("-- 1.__index元方法")
--以匿名函数方式
--meta.__index = function(table, key)
--    return "通过["..key.."] 访问的元素不存在" --通过[10] 访问的元素不存在
--end

--无返回值的情况
--meta.__index = function(table, key)
--    print( "通过["..key.."] 访问的元素不存在") --nil
--end

--__index元方法重写为另一个表，若普通表中存在，则返回；否则查询重写的另一个表，若都不存在，返回nil
other = {}
other[5] = '天津'
other[6] = '重庆'
meta.__index = other

--在重写__index之前访问 emp[6]：重庆
print(emp[6])


-- 2.__newindex元方法 ---------------------------------
--  ① 当用户为table中一个不存在的索引或key赋值时，就会自动调用元表的 __newindex 元方法。
print("-- 2.__newindex元方法")

--无返回值的情况(有没有返回值意义不大)
--function meta.__newindex(table, key,value)
--    print("新增的key为："..key.."，value为："..value)
--    --调用rawset函数，将新增的key-val写入到普通表中
--    rawset(table, key,value)
--end

--__newindex元方法重写为另一个表，元表指定另一个表的作用：暂存新增加的数据
meta.__newindex = other

--调用__newindex方法
emp.address = '北京市'
print(emp.address)
print(other.address)


-- 3.运算符元方法 ---------------------------------
--  ① 如果要为一个表扩展加号、减号 、等于 、小于 等运算功能，则可重写相应的元方法。
-- 4.tostring元方法 ---------------------------------
--  ① 如果想输出 table中的内容，可重写 __tostring 元方法。
-- 5.call元方法 ---------------------------------
--  ① 当将一个table以函数形式来使用时，系统会自动调用重写的 __call 元方法。
print("-- 3.运算符元方法")

meta = {
    __add = function(table, num)
        --遍历table中所有元素
        for i, v in pairs(table) do
            --如果类型为number
            if type(v) == "number" then
                table[i] = v + num
                --如果类型为string
            elseif type(v) == "string" then
                table[i] = v .. num
            end
        end
        --将操作后的表进行返回
        return table
    end, --注意使用","分割重写的方法

    --重写tostring方法
    __tostring = function(table)
        print("-- 4.tostring元方法")
        str = ""
        for i, v in pairs(empsum) do
            str = str .. " " .. v
        end
        return str
    end
}

--将普通表和元表关联
setmetatable(emp, meta)

--测试重写运算符元方法
empsum = emp + 5
--遍历empsum表
for k, v in pairs(empsum) do
    print(k .. "：" .. v)
end

--测试tostring方法
print(empsum)

--测试call方法
emp1 = { "北京", name = "张三", age = 23, '上海', '广州', '深圳', 15 }
--将普通表和匿名元表关联
setmetatable(emp1,
        {
            __tostring = function(table)
                str = ""
                for i, v in pairs(table) do
                    str = str .. " " .. v
                end
                return str
            end,

            --重写__call元方法
            __call = function(table, num, str)
                print("-- 5.__call元方法")
                --遍历table中所有元素
                for i, v in pairs(table) do
                    if type(v) == "number" then
                        table[i] = v + num
                    elseif type(v) == "string" then
                        table[i] = v .. str
                    end
                end
                return table
            end
        })
empsum1 = emp1(5, "-hello")
print(empsum1)