---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by White.
--- DateTime: 2023/1/8 17:59
---

--    lua学习——第二章 语法进阶

-- 1.table-------------------------
--    ① 数组：使用table 可以定义一维、二维、多维数组。Lua 中的数组索引是从 1开始的，且无需声明数组长度，可以随时增加元素，并且同一数组元素类型可以不同
--    ② map：使用table也可以定义出类似map的 key-value 数据结构。
--    ③ 混合结构：Lua允许将数组与key-value混合在同一个table中进行定义。中进行定义。key value 不会占用数组的数字索引值。
print("-----------1.table---------------")
print("--数组")
--定义数组，数组索引是从1开始！！！
arr1 = { "北京", "上海", "重庆" }
arr1[4] = '天津'
for i = 1, 4 do
    print("arr1[" .. i .. "] = " .. arr1[i])
end
--空数组必须声明
arr2 = {}
for i = 1, 5 do
    --第一维也需要声明
    arr2[i] = {}
    for j = 1, i do
        --则arr2[i]的数组下标为[j]
        arr2[i][j] = i * j
    end
end
for i = 1, 3 do
    for j = 1, i do
        print(arr2[i][j])
    end
end

--定义map1
print("--map")
map1 = { name = "张三", age = 22, sex = "male", marry = false, salary = 6000.5 }
--通过下标操作
map1["addr"] = "北京市"
print(map1["name"])
--通过“.”操作
map1.depart = "market"
print(map1.name)

--定义map2，其key为表达式
a = 'xxx'
b = 3
c = 5
map2 = {
    [a] = true,
    [b + c] = 'hello', --访问map2[8]，访问key
    ['hi1'] = 123,
    ['hi2'] = 123,
    123, --访问map2[1]，访问数组索引，key-value不占用数字索引值
    ['hi4'] = 123,
    ['hi5'] = 123,
    ['hi6'] = 123
}
--map只能用key进行查找
print(map2[8])
print(map2[1])

--定义混合结构
print("--混合结构")
map3 = {
    { name = "张三", age = 20 },
    { name = "李四", age = 25 },
    { name = "丽丽", age = 18 }
}
for i = 1, 3 do
    print(map3[i].name .. " = " .. map3[i].age)
end


-- 2.table操作函数
print("--table操作函数")
--① table.concat()，将指定的"数组"元素进行字符串连接
print(table.concat(arr1, "，"))

--② table.unpack()，拆包，返回指定table的"数组"中的从第i个元素到第j个元素
print(table.unpack(arr1))

--③ table.pack()，打包，指定的参数打包为一个数组返回
--fruit = table.pack("apple", "banana", "peach")
--print(table.unpack(fruit))
--print("fruit.n = "..fruit.n)
test = table.pack({ name = "张三", age = 20 }, 123, true)
print(test[1].name)

--④ table.maxn()，返回数组的最大索引，lua5.2之后不存在了？？？
--print(table.maxn(arr1))

--⑤ table.insert()，在指定位置pos插入值为value的一个元素
table.insert(map3, 1, "aaaaa")
print(table.unpack(map3))

--⑥ table.remove()，删除并返回位于pos位置的元素
pop = table.remove(map3, 2)
print(table.unpack(map3))

--⑦ table.sort()，对指定table的元素进行升序排序，也可按照指定函数 fun(a,b)中指定的规则进行排序。
cities = { "bj北京", "tj天津", "sh上海", "cq重庆" }
table.sort(cities)
print(table.unpack(cities))
--字母序反序排序
table.sort(cities, function(a, b)
    return a>b
end)
print(table.unpack(cities))


-- 2.迭代器-------------------------
--    ① ipairs(table)：仅会迭代"数组"元素
--    ② pairs(table)：会迭代整个table元素，无论是数组元素，还是key-value。
print("-----------2.迭代器---------------")
for i, v in ipairs(test) do
    print(i,v)
end
for k, v in pairs(map2) do
    print(k,v)
end