---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by White.
--- DateTime: 2023/1/8 12:26
---

-- lua学习——第一章 基础语法

-- 1.注释 ---------------------------
--   使用 "--" 表示行注释
--   使用 "--[[ ]]--"表示块注释
--print("hello, lua world!")

--[[print("aaaa")
print("aaaa")
print("aaaa")
print("aaaa")
]]--


-- 2.lua的数据类型  ---------------------
--[[
    ① nil：只有值nil属于该类，表示一个无效值，与Java中的null类似。但在条件表达式中相当于false。
    ② boolean：包含两个值（false和true）。
    ③ number：表示双精度类型的实浮点数。
    ④ string：由一对双引号或单引号括起来；多行时，可以在第一行中以[[开头，在最后一行中以】】结尾；换行符为字符串”\n”
    ⑤ table：类似于Java中的数组，但比数组的功能更强大，更灵活。
    ⑥ function：由 C 或 Lua 编写的函数
    ⑦ thread：协同线程，是协同函数的执行体，即正在执行的协同函数
    ⑧ userdata：一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据存储到 Lua 变量中调用
]]--
print("-----------2.数据类型---------------")
--定义多行字符串
str1 = "上海"
str2 = '北京'
str3 = [[这是一段多行字符串
第二行
第三行]]
print(str3)


-- 3.标识符  -----------------------------
--    ① 数字字母下划线组成，大小写敏感
--    ② lua是弱类型语言，变量分为全局变量和局部变量，默认是全局变量，全局变量声明可以在文件任何地方使用(需要先声明)，局部变量local相当于private变量，只能在声明的语句块中使用
print("-----------3.标识符---------------")
--定义局部变量
local x = 3
--定义函数
function f()
    y = 5
    --访问局部变量
    print("x = " .. x)
end
--访问函数
f()
--访问全局变量 y
print("y = " .. y)


-- 4.运算符  --------------------------------
--    ① 算术运算符  //：整除运算符
--    ② 关系运算符
--    ③ 逻辑运算符
--    ④ 其他运算符 ..：字符串连接符 a..b 返回（a b）
--                #：返回字符串长度或表的长度
print("-----------5.运算符---------------")
--整除运算符
print("5//2 = " .. 5 // 2)
--..字符串连接符
print("x..y = " .. x .. y)
--#返回字符串长度或表的长度
print("str3 的长度 " .. #str3)


-- 5.函数 ------------------------------------
--  Lua中函数的定义是以 function 开头，后跟函数名与参数列表，以 end 结尾。其可以没有返回值，也可以一次返回多个值。
--    ① 固定参函数
--    ② 可变参函数(使用“...”代表参数列表)
--    ③ 可返回多个值，Lua中的函数一次可以返回多个值，但需要有多个变量来同时接收。
--    ④ 普通函数、匿名函数都作为函数形参
print("-----------5.函数---------------")
--定义一个固定参函数，包含两个形参
function f1(a, b)
    print(a, b)
end
print("--固定参数函数")
print("无实参传递", f1())
print("传递一个实参", f1(10))
print("传递两个实参", f1(10, 20))
print("传递三个实参", f1(10, 20, 30))
--定义可变参数函数
function f2(...)
    local a, b, c, d = ...
    print(a, b, c, d)
    --输出所有参数
    print(...)
end
print("--可变参数函数")
print("传递三个实参", f2('a', 'b', 'c'))
print("传递四个实参", f2('a', 'b', 'c', 'd'))
print("传递五个实参", f2('a', 'b', 'c', 'd', 'e'))
--可返回多个值
function f3(a, b)
    local sum = a + b
    local div = a / b
    return sum, div
end
print("--可返回多个值")
m, n = f3(20, 5)
print("m , n = " .. m .. " " .. n)
--函数作为形参
print("--函数作为形参")
function sum(a, b)
    return a + b
end
function mul(a, b)
    return a * b
end
function f4(m, n, fun)
    local result = fun(m, n)
    print("result = " .. result)
end
--普通调用
f4(10, 20, sum);
f4(10, 20, mul);
--匿名函数调用
f4(10, 20, function(a, b)
    return a - b
end)


-- 6.流程控制语句  ---------------------
--    ① if语句，false 与 nil 作为假，将 true 与!nil 作为真，即使是 0 也是真。
--if语句
print("-----------6.流程控制语句---------------")
print("--if语句")
local a = 100
if false or nil then
    a = a - 20
elseif true and not nil and 0 then
    a = a + 20
end
print("a = " .. a)

--    ② 循环控制语句
--      while...do：只要while条件成立就一直循环
--      repeat...until：until的条件达到了，就停止循环
--      数值for：循环只适用于循环变量为数值型的情况
--      泛型for：泛型for用于遍历 table 中的所有值，其需要与
--      break：语句可以提前终止循环。其只能用于循环之中。
--      goto：goto语句可以将执行流程无条件地跳转到指定的标记语句处开始执行，注意，是开始
print("--循环控制语句1")
local a = 0
--while...do
while a < 3 do
    print(a)
    a = a + 1
end
--repeat...until
repeat
    print(a)
    a = a + 1
until a > 5
--数值for和java不一样 for(i=-3;i<=-1;i=i+0.5),步长省略为1
for i = -3, -1, 0.5 do
    print(i)
end
--break
for i = 1, 10 do
    print(i)
    i=i+1
    if i==3 then
        break
    end
end
--goto能不用就不用